(define (check n)
  (define (square x) (* x x))
  (define (even? x)
    (cond ((= (remainder x 2) 0) 1)
	  (else 0)))
  (define (expmod base exp m)
    (cond ((= exp 0) 1)
	  ((= (even? exp) 1)
	   (remainder (square (expmod base (/ exp 2) m)) m))
	  (else
	   (remainder (* base (expmod base (- exp 1) m)) m))))
  (define (check-Carmichael n count)
    (cond ((> count n) n)
	  ((= (expmod count n n) (remainder count n)) (check-Carmichael n (+ count 1)))
	  (else 1)))
  (check-Carmichael n 1))